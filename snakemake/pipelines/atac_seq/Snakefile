# %%
import os
import shutil
import functools
import itertools
import pathlib
from snakemake.io import InputFiles, OutputFiles
from pmbi.snakemake.lib import *
import tomllib
import re
from munch import Munch
import glob

# %%
def get_fastqs(wildcards, parent, readnum):
    return sorted(glob.glob(os.path.join(parent, "{samp}*_R{rn}_*.fastq.gz".format(samp=wildcards.sample, rn=readnum))))

# %%
def at_source(p, config):
    return os.path.join(config.core.source, p)

# %%
def import_config(path: str) -> Munch:
    with open(path, "rb") as c:
        config = Munch.fromDict(tomllib.load(c))
    return config

# %%
def check_config_paths(config):
    if not os.path.isfile(config.core.genome_reference):
        raise IOError(f"Genome reference file does not exist: {config.core.genome_reference}")
    for bl in config.core.blacklists:
        if not os.path.isfile(bl):
            raise IOError(f"Blacklist file does not exist: {bl}") 

# %%
config = import_config(workflow.source_path("config.toml"))
check_config_paths(config)

FILES = [x for x in os.listdir(config.core.fastq_files) if x.endswith(".fastq.gz")]
RENAME_FILES = [re.sub(config.core.sample_key, r"\1_\2.fastq.gz", x) for x in FILES]

SAMPLES = [re.sub("_R[12].fastq.gz$", "", x) for x in RENAME_FILES]
SAMPLES = list(set(SAMPLES))

localrules: link_rename_fastq

rule all:
    input:
        expand("{src}/bam/{sample}.sorted.filtered.bam", src=config.core.source, sample=SAMPLES)

rule link_rename_fastq:
    input: 
        r1=lambda wc: get_fastqs(wc, parent=config.core.fastq_files, readnum=1),
        r2=lambda wc: get_fastqs(wc, parent=config.core.fastq_files, readnum=2),
    output: 
        r1out=at_source(os.path.join("fastq/raw", "{sample}_R1.fastq.gz"), config),
        r2out=at_source(os.path.join("fastq/raw", "{sample}_R2.fastq.gz"), config),
    run:
        shell("ln -s {input.r1} {output.r1out}")
        shell("ln -s {input.r2} {output.r2out}")


rule trimgalore:
    input:
        r1raw=at_source(os.path.join("fastq/raw", "{sample}_R1.fastq.gz"), config),
        r2raw=at_source(os.path.join("fastq/raw", "{sample}_R2.fastq.gz"), config),
    output:
        r1trim=at_source("fastq/trim/{sample}_val_1.fq.gz", config),
        r2trim=at_source("fastq/trim/{sample}_val_2.fq.gz", config)
    resources:
        slurm_partition=config.resources.partition,
        tasks=1,
        cpus_per_task=config.resources.threads,
        mem_mb=config.resources.mem,
        disk_mb=config.resources.diskspace,
        runtime=6000
    params:
        threads=config.resources.threads,
        sink_outdir=os.path.join(config.core.sink, "fastq", "trim")
    run:
        @PushPullFiles(config.core.source, config.core.sink, input, output)
        def trimgalore(input, output, wildcards, params):
            shell(f"trim_galore --paired -j {params.threads} --stringency 5 -o {params.sink_outdir} --basename {wildcards.sample} {input.r1raw} {input.r2raw}")
        trimgalore(input, output, wildcards, params)


rule bowtie:
    input:
        r1=at_source("fastq/trim/{sample}_val_1.fq.gz", config),
        r2=at_source("fastq/trim/{sample}_val_2.fq.gz", config)
    output:
        bam=at_source("bam/{sample}.sorted.bam", config),
        bai=at_source("bam/{sample}.sorted.bam.bai", config)
    resources:
        slurm_partition=config.resources.partition,
        tasks=1,
        cpus_per_task=config.resources.threads,
        mem_mb=config.resources.mem,
        disk_mb=config.resources.diskspace,
        runtime=6000
    params:
        btibase=config.core.genome_reference,
        threads=config.resources.threads
    run:
        @PushPullFiles(config.core.source, config.core.sink, input, output)
        def bowtie(input, output, wildcards, params):

            # this one is a special case right now that I need to fix
            refdir= os.path.join(config.core.sink, "ref")
            if not os.path.isdir(refdir):
                os.mkdir(refdir)
            shell(f"cp {params.btibase}.*.bt2 {refdir}/.")

            shell(f"bowtie2 --very-sensitive-local --dovetail --no-discordant --no-mixed -p {params.threads} -x {params.btibase} -1 {input.r1} -2 {input.r2} | samtools view -b | samtools sort -T {config.core.sink}/tmp/samtoolstmp > {output.bam}")
            shell(f"samtools index {output.bam}")
        bowtie(input, output, wildcards, params)

rule filter_bam:
    input:
        bam=at_source("bam/{sample}.sorted.bam", config),
        bai=at_source("bam/{sample}.sorted.bam.bai", config)
    output:
        filtbam=at_source("bam/{sample}.sorted.filtered.bam", config)
    resources:
        slurm_partition=config.resources.partition,
        tasks=1,
        cpus_per_task=config.resources.threads,
        mem_mb=config.resources.mem,
        disk_mb=config.resources.diskspace,
        runtime=6000
    run:
        @PushPullFiles(config.core.source, config.core.sink, input, output)
        def filter_out_mt(input, output, wildcards):
            shell(f"samtools idxstats {input.bam} | cut -f1 | grep -v {config.core.mtchrom} | xargs samtools view -b {input.bam} > {output.filtbam}.rmMt")
            shell(f"samtools rmdup --output-fmt BAM {output.filtbam}.rmMt {output.filtbam}.rmdup")
            shell(f"samtools view -f 2 -q 20 -b {output.filtbam}.rmdup > {output.filtbam}.bltmp")
            for i,blf in enumerate(config.core.blacklists):
                shell(f"bedtools intersect -v -a {output.filtbam}.bltmp -b {blf} -wa > {output.filtbam}.bltmp.tmp")
                shell(f"mv {output.filtbam}.bltmp.tmp {output.filtbam}.bltmp")
            shell(f"mv {output.filtbam}.bltmp {output.filtbam}")
        filter_out_mt(input, output, wildcards)

